<project name="cv-engine" default="dist" basedir="..">
    <property name="src.dir" value="${basedir}/sources"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="tmp.dir" value="${basedir}/tmp"/>
    <property name="tests.dir" value="${basedir}/tests"/>
    <property name="build.dir" value="${basedir}/build"/>

    <property name="build.properties.file" value="build.properties"/>
    <property file="${build.dir}/${build.properties.file}"/>

    <property name="zip.name" value="dist.zip"/>

    <target name="clean">
        <delete dir="${dist.dir}"/>
        <delete dir="${tmp.dir}"/>
    </target>

    <target name="init" depends="clean">
        <mkdir dir="${dist.dir}"/>
    </target>

    <target name="phpunit">
        <exec dir="${tests.dir}" executable="cmd" failonerror="true">
            <arg value="/c"/>
            <arg value="phpunit"/>
            <arg value="--stop-on-error"/>
            <arg value="-v"/>
        </exec>
    </target>

    <target name="pdf" depends="phpunit">
        <exec dir="${build.dir}" executable="cmd" osfamily="windows">
            <arg value="/c"/>
            <arg value="CScript"/>
            <arg value="docx2pdf.vbs"/>
        </exec>
    </target>

    <target name="dist" depends="init,pdf">
        <mkdir dir="${tmp.dir}"/>

        <copy todir="${tmp.dir}">
            <fileset dir="${src.dir}">
                <include name="**/files/*.docx"/>
                <include name="**/files/*.pdf"/>
                <include name="**/template/**"/>
                <include name="**/*.php"/>
                <include name="**/*.sqlite"/>
                <include name="**/.htaccess"/>

                <exclude name="**/files/*template*"/>
                <exclude name="**/db/init/*Init*"/>
                <exclude name="**/utils/generator/**"/>
                <exclude name="**/*Generator*"/>
            </fileset>
        </copy>

        <zip destfile="${dist.dir}/${zip.name}" basedir="${tmp.dir}"/>

        <delete dir="${tmp.dir}"/>
    </target>

    <target name="deploy" depends="dist">
        <fail message="${build.dir}/${build.properties.file} file is not available. deploy stopped.">
            <condition>
                <not>
                    <resourcecount count="1">
                        <fileset dir="${build.dir}">
                            <filename name="${build.properties.file}"/>
                        </fileset>
                    </resourcecount>
                </not>
            </condition>
        </fail>

        <mkdir dir="${tmp.dir}"/>

        <unzip src="${dist.dir}/${zip.name}" dest="${tmp.dir}"/>

        <!-- create folder to deploy; if already exists: nothing to do -->
        <ftp action="mkdir" server="${ftp.hostname}" userid="${ftp.username}" password="${ftp.password}" remotedir="${ftp.remotedir}"/>

        <!-- if folder exists: remove content in two steps: first all files, then all folders; if folder is empty: nothing to delete -->
        <ftp action="del" server="${ftp.hostname}" userid="${ftp.username}" password="${ftp.password}" remotedir="${ftp.remotedir}">
            <fileset>
                <include name="**/*"/>
            </fileset>
        </ftp>

        <ftp action="rmdir" server="${ftp.hostname}" userid="${ftp.username}" password="${ftp.password}" remotedir="${ftp.remotedir}">
            <fileset>
                <include name="**/*"/>
            </fileset>
        </ftp>

        <ftp server="${ftp.hostname}" port="${ftp.port}" userid="${ftp.username}" password="${ftp.password}" remotedir="${ftp.remotedir}" passive="no" depends="no" binary="yes" verbose="yes">
            <fileset dir="${tmp.dir}">
                <include name="**"/>
            </fileset>
        </ftp>

        <delete dir="${tmp.dir}"/>
    </target>
</project>